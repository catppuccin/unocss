---
import Main from '../layout/Main.astro';

import { flavorEntries } from '@catppuccin/palette';

const {
  flavourNames,
  flavourEmojis,
  flavourPrettyNames,
  accentColourNames,
  neutralColourNames,
} = flavorEntries.reduce(
  (acc, [flavourId, flavour], index) => {
    acc.flavourNames.push(flavourId);
    acc.flavourEmojis.push(flavour.emoji);
    acc.flavourPrettyNames.push(flavour.name);

    if (index === 0) {
      flavour.colorEntries.forEach(([colourId, colourData]) => {
        (colourData.accent ?
          acc.accentColourNames
        : acc.neutralColourNames
        ).push(colourId);
      });
    }

    return acc;
  },
  {
    flavourNames: [] as string[],
    flavourEmojis: [] as string[],
    flavourPrettyNames: [] as string[],
    accentColourNames: [] as string[],
    neutralColourNames: [] as string[],
  },
);
---

<Main>
  <div class='mx-4 my-4 lg:(w-2/3 mx-a mt-16)'>
    <div>
      <div>
        <h1 class='max-w-fit text-5xl font-extrabold pb-2 lg:text-6xl'>
          Catppuccin
        </h1>
        <ul>
          {
            [
              ['Documentation', `/docs`],
              ['GitHub', 'https://github.com/catppuccin/unocss'],
              ['npm', 'https://www.npmjs.com/package/@catppuccin/unocss'],
            ].map(([text, href]) => (
              <li class='inline'>
                <a
                  class='font-semibold text-[--ctp-blue] transition-colors duration-300 ease'
                  href={href}
                  target={href === '/docs' ? '_self' : '_blank'}
                >
                  {text}
                </a>
              </li>
            ))
          }
        </ul>
      </div>
    </div>
    <div class='mt-12 space-y-8'>
      <div>
        <h2 class='text-3xl font-extrabold mb-6'>Flavours</h2>
        <div class='flex flex-wrap gap-2 items-end'>
          {
            flavourNames.map((flavour, index) => (
              <button
                type='button'
                class='bg-[--ctp-surface1] h-12 p-2 rounded-8 font-semibold cursor-pointer min-w-fit hover:(bg-[--ctp-surface2] scale-y-120)'
                style={`width: ${Math.random() * 128 + 48}px;`}
                data-flavour={
                  Object.fromEntries(
                    flavourNames.map((name, index) => [
                      name,
                      flavourEmojis[index],
                    ]),
                  )[flavour]
                }
                data-pill
              >
                {flavourPrettyNames[index]}
              </button>
            ))
          }
        </div>
      </div>
      <div>
        <h2 class='text-3xl font-extrabold mb-6'>Accent Colours</h2>
        <div class='flex flex-wrap gap-2 items-end'>
          {
            accentColourNames.map(colour => (
              <span
                title={colour}
                class:list={[
                  `bg-[--ctp-${colour}]`,
                  'rounded-full',
                  'h-12',
                  'hover:scale-y-120',
                ]}
                style={`width: ${Math.random() * 128 + 48}px;`}
                data-pill
              />
            ))
          }
        </div>
      </div>
      <div>
        <h2 class='text-3xl font-extrabold mb-6'>Neutral Colours</h2>
        <div class='flex flex-wrap gap-2 items-end'>
          {
            neutralColourNames.map(colour => {
              return (
                <span
                  title={colour}
                  class:list={[
                    `bg-[--ctp-${colour}]`,
                    'rounded-full',
                    'h-12',
                    'hover:scale-y-120',
                  ]}
                  style={`width: ${Math.random() * 128 + 48}px;`}
                  data-pill
                />
              );
            })
          }
        </div>
      </div>
    </div>
  </div>
</Main>

<style>
  button[data-flavour]::before {
    @apply content-[attr(data-flavour)];
  }

  li:not(:last-child)::after {
    @apply content-['â€¢'];
  }

  [data-pill] {
    @apply transition-[transform,width,background-color,outline-color] duration-300 ease;
  }

  button[data-flavour] {
    @apply outline-(2 transparent solid);

    &:focus-visible {
      @apply outline-[--ctp-base];
    }
  }

  html[data-theme='ðŸŒ»']:not([data-preview]) button[data-flavour='ðŸŒ»'],
  html[data-theme='ðŸª´']:not([data-preview]) button[data-flavour='ðŸª´'],
  html[data-theme='ðŸŒº']:not([data-preview]) button[data-flavour='ðŸŒº'],
  html[data-theme='ðŸŒ¿']:not([data-preview]) button[data-flavour='ðŸŒ¿'] {
    @apply outline-(2 [--ctp-base] solid);
  }
</style>

<script>
  const pillElements = document.querySelectorAll<HTMLElement>('[data-pill]');

  Promise.all([enablePreviewMode(), pillLengthRandomiser(), themeSwitcher()]);

  async function pillLengthRandomiser() {
    if (isPreviewModeRequested()) return;

    const pillWidths = Array.from(
      { length: pillElements.length },
      () => Math.floor(Math.random() * 128) + 48,
    );

    await new Promise(resolve => setTimeout(resolve, 100));

    requestAnimationFrame(() => {
      pillElements.forEach((pill, index) => {
        pill.style.setProperty('width', `${pillWidths[index]}px`);
      });
    });
  }

  async function themeSwitcher() {
    document.addEventListener('click', event => {
      if (!event.target || !(event.target instanceof HTMLElement)) return;

      const flavourButton = event.target.closest<HTMLButtonElement>(
        'button[data-flavour]',
      );

      if (flavourButton?.dataset['flavour']) {
        document.documentElement.dataset['theme'] =
          flavourButton.dataset['flavour'];
      }
    });
  }

  async function enablePreviewMode() {
    if (!isPreviewModeRequested()) return;
    document.documentElement.dataset['preview'] = '';
  }

  function isPreviewModeRequested() {
    return location.search.includes('?preview');
  }
</script>
