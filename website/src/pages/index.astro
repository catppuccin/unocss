---
import Main from '../layout/Main.astro';

import {
  FLAVOUR_NAMES,
  ACCENT_COLOUR_NAMES,
  NEUTRAL_COLOUR_NAMES,
  FLAVOUR_EMOJIS,
} from '@catppuccin/unocss/palette';
---

<Main>
  <!--* Use `clamp()` sometime. -->
  <div class='w-2/3 ml-6 my-4 lg:mx-a lg:mt-16'>
    <div>
      <div>
        <h1 class='text-6xl leading-[1] font-extrabold pb-2'>Catppuccin</h1>
        <span class='text-[--ctp-subtext1] text-md'
          >ðŸŒ¸ Soothing pastel theme for UnoCSS!</span
        >
        <ul>
          {
            [
              ['Documentation', `${import.meta.env.BASE_URL}/docs`],
              // TODO: Update link after moving to the Catppuccin
              // organisation.
              ['GitHub', 'https://github.com/catuhana/unocss-catppuccin'],
            ].map(([text, href]) => (
              <li class='inline'>
                <a
                  href={href}
                  target='_blank'
                  class='font-semibold text-[--ctp-blue]'
                >
                  {text}
                </a>
              </li>
            ))
          }
        </ul>
      </div>
    </div>
    <div class='mt-12 space-y-8'>
      <div>
        <h2 class='text-3xl font-extrabold mb-6'>Flavours</h2>
        <div class='flex flex-wrap gap-2 items-end'>
          {
            FLAVOUR_NAMES.map(flavour => (
              <button
                type='button'
                class={`text-ctp-${flavour}-text bg-ctp-${flavour}-surface1 h-12 p-2 rounded-8 hover:bg-ctp-${flavour}-surface2 font-semibold cursor-pointer min-w-fit transition-all duration-300 ease hover:scale-y-120`}
                style={`width: ${Math.random() * 128 + 48}px;`}
                data-flavour={
                  Object.fromEntries(
                    FLAVOUR_NAMES.map((name, index) => [
                      name,
                      FLAVOUR_EMOJIS[index],
                    ])
                  )[flavour]
                }
                data-pill
              >
                {flavour.charAt(0).toUpperCase() + flavour.slice(1)}
              </button>
            ))
          }
        </div>
      </div>
      <div>
        <h2 class='text-3xl font-extrabold mb-6'>Accent Colours</h2>
        <div class='flex flex-wrap gap-2 items-end'>
          {
            ACCENT_COLOUR_NAMES.map(colour => (
              <span
                class={`bg-[--ctp-${colour}] rounded-full h-12 transition-all duration-300 ease hover:scale-y-120`}
                style={`width: ${Math.random() * 128 + 48}px;`}
                title={colour}
                data-pill
              />
            ))
          }
        </div>
      </div>
      <div>
        <h2 class='text-3xl font-extrabold mb-6'>Neutral Colours</h2>
        <div class='flex flex-wrap gap-2 items-end'>
          {
            NEUTRAL_COLOUR_NAMES.map(colour => {
              return (
                <span
                  class={`bg-[--ctp-${colour}] rounded-full h-12 transition-all duration-300 ease hover:scale-y-120`}
                  style={`width: ${Math.random() * 128 + 48}px;`}
                  title={colour}
                  data-pill
                />
              );
            })
          }
        </div>
      </div>
    </div>
  </div>
</Main>

<style>
  button[data-flavour]::before {
    content: attr(data-flavour);
  }

  li:not(:last-child)::after {
    content: 'â€¢';
  }
</style>

<script>
  import { DETERMINISTIC_PILL_LENGTH } from 'astro:env/client';

  const pillElements = document.querySelectorAll<HTMLElement>('[data-pill]');

  Promise.all([pillLengthRandomiser(), themeSwitcher()]);

  async function pillLengthRandomiser() {
    if (DETERMINISTIC_PILL_LENGTH) return;

    const pillWidths = Array.from(
      { length: pillElements.length },
      () => Math.floor(Math.random() * 128) + 48
    );

    await new Promise(resolve => setTimeout(resolve, 100));

    requestAnimationFrame(() => {
      pillElements.forEach((pill, index) => {
        pill.style.setProperty('width', `${pillWidths[index]}px`);
      });
    });
  }

  async function themeSwitcher() {
    document.addEventListener('click', event => {
      if (!event.target || !(event.target instanceof HTMLElement)) return;

      const flavourButton = event.target.closest<HTMLButtonElement>(
        'button[data-flavour]'
      );

      if (flavourButton?.dataset['flavour']) {
        document.documentElement.dataset['theme'] =
          flavourButton.dataset['flavour'];
      }
    });
  }
</script>
