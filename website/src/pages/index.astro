---
import Main from '../layout/Main.astro';

import {
  FLAVOURS,
  FLAVOUR_FRAPPE_COLOURS as COLOURS,
} from '@catppuccin/unocss/palette';

// TODO: Improve palette generation.
const [ACCENT_COLOURS, BASE_COLOURS] = Object.keys(COLOURS).reduce(
  (acc, colour) => {
    const isBaseColour =
      colour === 'text'
      || colour === 'subtext1'
      || colour === 'subtext0'
      || colour === 'overlay2'
      || colour === 'overlay1'
      || colour === 'overlay0'
      || colour === 'surface2'
      || colour === 'surface1'
      || colour === 'surface0'
      || colour === 'base'
      || colour === 'mantle'
      || colour === 'crust';

    if (isBaseColour) {
      acc[1].push(colour);
    } else {
      acc[0].push(colour);
    }
    return acc;
  },
  [[] as string[], [] as string[]]
);
---

<Main>
  <!-- TODO: Use `clamp()` sometime. -->
  <div class='w-2/3 ml-6 my-4 lg:mx-a lg:mt-16'>
    <div>
      <div>
        <h1 class='text-6xl leading-[1] font-extrabold pb-2'>Catppuccin</h1>
        <span class='text-[--ctp-subtext1] text-md'
          >ðŸŒ¸ Soothing pastel theme for UnoCSS!</span
        >
      </div>
    </div>
    <div class='mt-12 space-y-8'>
      <div>
        <h2 class='text-3xl font-extrabold mb-6'>Flavours</h2>
        <div class='flex flex-wrap gap-2 items-end'>
          {
            Object.keys(FLAVOURS).map(flavour => (
              <button
                type='button'
                class={`text-ctp-${flavour}-text bg-ctp-${flavour}-surface1 h-12 p-2 rounded-8 hover:bg-ctp-${flavour}-surface2 font-semibold cursor-pointer min-w-fit transition-all duration-300 ease hover:scale-y-120`}
                style={`width: ${Math.random() * 128 + 48}px;`}
                data-flavour={
                  { latte: 'ðŸŒ»', frappe: 'ðŸª´', macchiato: 'ðŸŒº', mocha: 'ðŸŒ¿' }[
                    flavour
                  ]
                }
                data-pill
              >
                {flavour.charAt(0).toUpperCase() + flavour.slice(1)}
              </button>
            ))
          }
        </div>
      </div>
      <div>
        <h2 class='text-3xl font-extrabold mb-6'>Accent Colours</h2>
        <div class='flex flex-wrap gap-2 items-end'>
          {
            ACCENT_COLOURS.map(colour => (
              <span
                class={`bg-[--ctp-${colour}] w-[attr(data-pill-length)] rounded-full h-12 transition-all duration-300 ease hover:scale-y-120`}
                style={`width: ${Math.random() * 128 + 48}px;`}
                title={colour}
                data-pill
              />
            ))
          }
        </div>
      </div>
      <div>
        <h2 class='text-3xl font-extrabold mb-6'>Base Colours</h2>
        <div class='flex flex-wrap gap-2 items-end'>
          {
            BASE_COLOURS.map(colour => {
              return (
                <span
                  class={`bg-[--ctp-${colour}] w-[attr(data-pill-length)] rounded-full h-12 transition-all duration-300 ease hover:scale-y-120`}
                  style={`width: ${Math.random() * 128 + 48}px;`}
                  title={colour}
                  data-pill
                />
              );
            })
          }
        </div>
      </div>
    </div>
  </div>
</Main>

<style>
  button[data-flavour]::before {
    content: attr(data-flavour);
  }

  span[title='base'] {
    outline: 1px solid var(--ctp-text);
  }
</style>

<script>
  import { DETERMINISTIC_PILL_LENGTH } from 'astro:env/client';

  Promise.all([pillLengthRandomiser(), themeSwitcher()]);

  async function pillLengthRandomiser() {
    if (DETERMINISTIC_PILL_LENGTH) return;

    await new Promise(resolve => setTimeout(resolve, 300));
    document.querySelectorAll<HTMLElement>('[data-pill]').forEach(pill => {
      pill.style.width = `${Math.floor(Math.random() * 128) + 48}px`;
    });
  }

  async function themeSwitcher() {
    document
      .querySelectorAll<HTMLButtonElement>('button[data-flavour]')
      .forEach(button => {
        button.addEventListener('click', () => {
          const flavour = button.getAttribute('data-flavour');
          if (flavour) {
            document.documentElement.setAttribute('data-theme', flavour);
          }
        });
      });
  }
</script>
